package network

import (
	"fmt"
	"net"

	"github.com/abiosoft/colima/embedded"
	"github.com/abiosoft/colima/environment"
	"github.com/abiosoft/colima/util"
)

// DNSManager manages dns configuration and coredns server in a colima instance.
type DNSManager interface {
	Provision(nameservers []net.IP) error
	Start() error
}

// NewDNSManager creates a new dns manager use guest for vm actions.
func NewDNSManager(guest environment.GuestActions) DNSManager {
	return limaDNSManager{GuestActions: guest}
}

const (
	dnsResolvFile       = "/etc/resolv.conf"
	dnsResolvFileLima   = "/etc/resolv/lima.conf"
	dnsResolvFileColima = "/etc/resolv/colima.conf"

	coreDNSFile = "/etc/coredns/Corefile"
)

var dnsFileHeaders = map[string]string{
	dnsResolvFile: `# This file is autogenerated by colima and all changes will be discarded on startup
# DNS resolution is done via` + dnsResolvFileColima + `, with ` + dnsResolvFileLima + ` as the fallback option.
# The predictable way of configuring DNS is to specify '--dns' flag at 'colima start'.
`,
	dnsResolvFileColima: `# This file is autogenerated by colima and all changes will be discarded on startup
# User configured DNS via the '--dns' flag for 'colima start' appears here.
`,
}

var _ DNSManager = (*limaDNSManager)(nil)

// limaDNSManager implements DNSManager.
// this is specific done by modifying the resolv file and is specific to Alpine, may be different for other distros.
type limaDNSManager struct {
	environment.GuestActions
}

// Provision implements DNSManager
func (l limaDNSManager) Provision(nameservers []net.IP) error {
	// init
	if err := l.init(); err != nil {
		return err
	}

	// prepend with header
	line := fmt.Sprintf(`echo %s > %s`, dnsFileHeaders[dnsResolvFileColima], dnsResolvFileColima)
	if err := l.RunQuiet("sudo", "sh", "-c", line); err != nil {
		return fmt.Errorf("error initiating DNS config: %w", err)
	}

	for _, dns := range nameservers {
		line := fmt.Sprintf(`echo nameserver %s >> %s`, dns.String(), dnsResolvFileColima)
		if err := l.RunQuiet("sudo", "sh", "-c", line); err != nil {
			return fmt.Errorf("error applying DNS config: %w", err)
		}
	}

	return nil
}

const QemuSlirpIP = "192.168.5.15"

// Start implements DNSManager
func (l limaDNSManager) Start() error {
	// start coredns
	if err := l.RunQuiet("sudo", "service", "coredns", "start"); err != nil {
		// revert to default
		if err := l.RunQuiet("sudo", "cp", dnsResolvFileColima, dnsResolvFile); err != nil {
			return fmt.Errorf("error setting default dns config: %w", err)
		}
		return fmt.Errorf("error starting dns server: %w", err)
	}

	{
		// set the file header
		line := fmt.Sprintf(`echo %s > %s`, dnsFileHeaders[dnsResolvFile], dnsResolvFile)
		if err := l.RunQuiet("sudo", "sh", "-c", line); err != nil {
			return fmt.Errorf("error setting dns server: %w", err)
		}
	}

	{
		// set the nameserver
		line := fmt.Sprintf(`echo nameserver %s >> %s`, QemuSlirpIP, dnsResolvFile)
		if err := l.RunQuiet("sudo", "sh", "-c", line); err != nil {
			return fmt.Errorf("error setting dns server: %w", err)
		}
	}
	return nil
}

func (l limaDNSManager) writeCoreFile() error {
	bstr, err := embedded.ReadString("network/Corefile")
	if err != nil {
		return fmt.Errorf("cannot read coredns config: %w", err)
	}

	var values = struct {
		Colima string
		Lima   string
	}{
		Colima: dnsResolvFileColima,
		Lima:   dnsResolvFileLima,
	}

	b, err := util.ParseTemplate(bstr, values)
	if err != nil {
		return fmt.Errorf("error parsing dns template: %w", err)
	}

	return l.Write(coreDNSFile, string(b))
}

func (l limaDNSManager) init() error {
	// copy coredns config
	if err := l.writeCoreFile(); err != nil {
		return err
	}

	// backup default resolv file (if not previously done)
	if l.RunQuiet("stat", dnsResolvFileLima) == nil {
		return nil
	}

	if err := l.RunQuiet("sudo", "mkdir", "-p", "/etc/resolv"); err != nil {
		return fmt.Errorf("error creating resolv directory: %w", err)
	}

	if err := l.RunQuiet("sudo", "cp", dnsResolvFile, dnsResolvFileLima); err != nil {
		return fmt.Errorf("error backing up default config: %w", err)
	}
	return nil
}
